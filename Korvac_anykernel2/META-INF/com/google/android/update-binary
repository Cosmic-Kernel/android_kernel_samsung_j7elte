#!/sbin/sh
# Recovery Setup Backend
# themagicalmammal --> maintainer of the kernel
# mdmaher for porting marshmallow drivers and thus fixing a hell lot of bugs including battery swelling

OUTFD=/proc/self/fd/$2;
ZIP="$3";
DIR=`dirname "$ZIP"`;

ui_print() {
  until [ ! "$1" ]; do
    echo -e "ui_print $1\nui_print" > $OUTFD;
    shift;
  done;
}
show_progress() { echo "progress $1 $2" > $OUTFD; }
set_perm_recursive() {
  dirs=$(echo $* | $bb awk '{ print substr($0, index($0,$5)) }');
  for i in $dirs; do
    chown -R $1.$2 $i; chown -R $1:$2 $i;
    find "$i" -type d -exec chmod $3 {} +;
    find "$i" -type f -exec chmod $4 {} +;
  done;
}
file_getprop() { grep "^$2=" "$1" | cut -d= -f2; }
if [ ! "$(getprop 2>/dev/null)" ]; then
  getprop() {
    local propval="$(file_getprop /default.prop $1 2>/dev/null)";
    test "$propval" || local propval="$(file_getprop /system/build.prop $1 2>/dev/null)";
    test "$propval" && echo "$propval" || echo "";
  }
fi;
abort() { ui_print "$*"; umount /system; umount /data; exit 1; }

show_progress 1.34 4;
ui_print " ";
mkdir -p /tmp/anykernel/bin;
cd /tmp/anykernel;
unzip -o "$ZIP";
if [ $? != 0 -o -z "$(ls /tmp/anykernel/tools)" ]; then
  abort "Unzip failed. Aborting...";
fi;
chmod -R 755 /tmp/anykernel/tools /tmp/anykernel/bin;
bb=/tmp/anykernel/tools/busybox;

ui_print " ";
ui_print " ";
ui_print " ";
ui_print " ";
ui_print "****************************************";
ui_print " ";
ui_print "$(file_getprop /tmp/anykernel/essential.prop project.name)";
ui_print "$(file_getprop /tmp/anykernel/essential.prop contributor.name)";
mount -o ro /system;
mount /data;

if [ "$(file_getprop /tmp/anykernel/essential.prop do.devicecheck)" == 1 ]; then
  ui_print " ";
  ui_print "> Checking device...";
  for i in 1 2 3 4 5; do
    testname="$(file_getprop /tmp/anykernel/essential.prop device.name$i)";
    if [ "$(getprop ro.product.device)" == "$testname" -o "$(getprop ro.build.product)" == "$testname" ]; then
      ui_print "--- $testname";
      match=1;
    fi;
  done;
  ui_print " ";
  if [ "$match" != 1 ]; then
    abort "--- Unsupported device. Aborting...";
  fi;
  ui_print "> Successful"
fi;

if [ "$(file_getprop /tmp/anykernel/essential.prop do.initd)" == 1 ]; then
  ui_print " ";
  ui_print "> Creating init.d...";
  mount -o remount,rw /system;
  mkdir /system/etc/init.d;
  set_perm_recursive 0 0 0755 0755 /system/etc/init.d;
  mount -o remount,ro /system;
  ui_print "> Successful"
fi;

ui_print " ";
ui_print "> Starting .img Setup...";
for i in $($bb --list); do
  $bb ln -s $bb /tmp/anykernel/bin/$i;
done;
if [ $? != 0 -o -z "$(ls /tmp/anykernel/bin)" ]; then
  abort "--- Busybox setup failed. Aborting...";
fi;
PATH="/tmp/anykernel/bin:$PATH" $bb ash /tmp/anykernel/anykernel.sh $2;
if [ $? != "0" ]; then
  abort;
fi;
ui_print "> .img Setup Successful"

if [ "$(file_getprop /tmp/anykernel/essential.prop do.modules)" == 1 ]; then
  ui_print " ";
  ui_print "> Pushing modules...";
  mount -o remount,rw /system;
  pronto=/system/lib/modules/pronto/pronto_wlan.ko
  prontonew=/tmp/anykernel/modules/pronto_wlan.ko
  wlan=/system/lib/modules/wlan.ko
  wlannew=/tmp/anykernel/modules/wlan.ko
  if [ -f $prontonew ] && [ ! -f $wlannew ];
  then
    ui_print "--- Using method 1"
    if [ -f $pronto ];
    then
      ui_print "----- Pronto_wlan.ko exists"
      ui_print "------- Removing existing pronto_wlan.ko"
      rm -f $pronto
      ui_print "----- Successfully removed"
    fi
    ui_print "----- Copying pronto_wlan.ko"
    cp -f $prontonew $pronto
    chmod 0644 $pronto
    ui_print "------- Copying successful"
    if [ -f $wlan ]; then
    ui_print "----- Removing existing wlan.ko"
    rm -f $wlan
    ui_print "------- Successfully removed"
    fi
    ui_print "----- Symlinking pronto_wlan.ko to wlan.ko"
    ln -s $pronto $wlan
	ui_print "------- Successfully symlinked"
    ui_print "--- Setting permissions"
    chmod 0644 $wlan
  fi

  if [ ! -f $prontonew ] && [ -f $wlannew ]
  then
    ui_print "--- Using method 2"
    mv -f $wlannew $prontonew
    chmod 0644 $prontonew
    if [ -f $pronto ];
    then
      ui_print "----- Pronto_wlan.ko exists"
      ui_print "------- Removing existing pronto_wlan.ko"
      rm -f $pronto
      ui_print "----- Successfully removed"
    fi
    ui_print "----- Copying pronto_wlan.ko"
    cp -f $prontonew $pronto
    chmod 0644 $pronto
    ui_print "------- Copying successful"
    if [ -f $wlan ]; then
    ui_print "----- Removing existing wlan.ko"
    rm -f $wlan
    ui_print "------- Successfully removed"
    fi
    ui_print "----- Symlinking pronto_wlan.ko to wlan.ko"
    ln -s $pronto $wlan
    ui_print "------- Successfully symlinked"
    ui_print "--- Setting permissions"
    chmod 0644 $wlan
  fi

  if [ -f $prontonew ] && [ -f $wlannew ]
  then
    ui_print "--- Using Method 3"
    if [ -f $pronto ]; then
      ui_print "----- Pronto_wlan.ko exists"
      ui_print "------- Removing existing pronto_wlan.ko"
      rm -f $pronto
      ui_print "----- Successfully removed"
    fi
    if [ -f $wlan ]; then
      ui_print "----- Removing existing wlan.ko"
      rm -f $wlan
      ui_print "------- Successfully removed"
    fi
    ui_print "----- Copying pronto_wlan.ko"
    cp -f $prontonew  $pronto
    chmod 0644 $pronto
    ui_print "------- Copying successful"
    ui_print "----- Copying wlan.ko"
    cp -f $wlannew $wlan
    ui_print "------- Copying successful"
    chmod 0644 $wlan
    ui_print "--- Setting permissions"
  fi
  mount -o remount,ro /system;
  ui_print "> Successful with modules"
fi;

if [ "$(file_getprop /tmp/anykernel/essential.prop provideuser.img)" == 1 ]; then
  ui_print "> Providing .img file"
  if [ "$(file_getprop /tmp/anykernel/essential.prop image.type)" == 1 ]; then
    name="recovery.img"
    filename="recovery-new.img"
  else
    name="boot.img"
    filename="boot-new.img"
  fi
  ui_print "       NOTE REGARDING YOUR REQUEST      "
  ui_print "   You have enabled in this script to   "
  ui_print "     provide you the $name file  "
  ui_print "      Providing your $name file  "
  ui_print "  Copying $name file to /sdcard  "
  ui_print "        Your $name name is       "
  ui_print "    $filename in the above path  "
  chmod 0755 /tmp/anykernel/boot-new.img
  if [ "$(file_getprop /tmp/anykernel/essential.prop image.type)" == 1 ]; then
    if [ -e /sdcard/recovery-new.img ]
    then
      rm -f /sdcard/recovery-new.img
    fi
    cp -f /tmp/anykernel/boot-new.img /sdcard/recovery-new.img
  else
    if [ -e /sdcard/boot-new.img ]
    then
      rm -f /sdcard/boot-new.img
    fi
    cp -f /tmp/anykernel/boot-new.img /sdcard/boot-new.img
  fi
fi

if [ "$(file_getprop /tmp/anykernel/essential.prop do.cleanup)" == 1 ]; then
  rm -rf /tmp/anykernel;
fi;

umount /system;
umount /data;
ui_print " ";
ui_print " ";
ui_print " ";
ui_print " ";
ui_print "                  Done!                 ";
ui_print "****************************************";
ui_print " ";
ui_print " ";
